{"version":3,"file":"static/js/117.c943c07b.chunk.js","mappings":"oNAWMA,EAAW,CACf,KACA,QACA,OACA,iDACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,OACA,QACA,gCACA,UAqBIC,EAAY,SAAHC,GAAyB,IA3ClBC,EA2CDC,EAAWF,EAAXE,YAInBC,GAA0BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAGF,EAAA,GAAEG,EAAUH,EAAA,GACtBI,GAAiCL,EAAAA,EAAAA,UAASN,EAASS,IAAKG,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjDE,EAAOD,EAAA,GAAEE,EAAaF,EAAA,GAC7BG,GAA2BT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAUF,EAAA,GACvBG,GAAgCb,EAAAA,EAAAA,WAAS,GAAKc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAvCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAuB5B,OAhDkB,SAACG,EAAUC,GAC7B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CAC1B,GAAG,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,SAChB,GAAGJ,GACH,OAAO,kBAAMO,cAAcF,EAAI,CACjC,CACA,OAAO,WAAO,CAChB,GAAG,CAACL,GACN,CAWEQ,EAAY,WACV,IAAIC,EAASxB,EACTyB,EAAUjB,EACVA,EAXO,IAWQjB,EAASS,GAAK0B,SAC/BF,GAAU,EACVC,EAAU,GAERD,IAAWjC,EAASmC,OAClB/B,GACFM,EAAW,GACXQ,EAAW,IAEXI,GAAY,IAGdR,EAAcd,EAASiC,GAAQG,MAAM,EAAGF,IACxCxB,EAAWuB,GACXf,EAAWgB,EAAU,GAEzB,GAAGb,EA1BW,GA0BQ,OAGpBgB,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,OA5EgBpC,EA4EIU,EAzEb,mEACD2B,KAAKrC,IAAyB,IAAhBA,EAAKgC,OAwEM,CAAC,EAAI,CAAEM,MAAO,QAC7CC,aAAc,kBAAMpB,GAAY,EAAM,EACtCqB,aAAc,kBAAOlC,EAAMT,EAASmC,QAAWb,GAAY,EAAK,EAACsB,UAEjEP,EAAAA,EAAAA,KAAA,KAAGQ,KAAK,gCAA+BD,UACrCP,EAAAA,EAAAA,KAAA,QAAAO,SAAM,8BAOd,EAEA3C,EAAU6C,aAAe,CACvB1C,aAAa,GAOf,Q,UC3EA,EApBgB,WAAH,OACXiC,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,2DAA0DL,UAEtEM,EAAAA,EAAAA,MAAA,WAASZ,UAAU,OAAOT,GAAG,UAASe,SAAA,EACpCP,EAAAA,EAAAA,KAAA,UAAAO,UACEP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOM,UACpBP,EAAAA,EAAAA,KAAA,MAAI,cAAY,UAASO,UAACP,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACC,GAAG,WAAUR,SAAC,mBAGlDM,EAAAA,EAAAA,MAAA,OAAKZ,UAAU,WAAUM,SAAA,EACvBP,EAAAA,EAAAA,KAAA,KAAAO,SAAG,sDACHP,EAAAA,EAAAA,KAACpC,EAAS,QAEZoC,EAAAA,EAAAA,KAACgB,EAAAA,EAAY,QAEV,C","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  'hi',\n  'hello',\n  'hola',\n  'you-can-email-me-at-literally-anything! Really',\n  'well, not anything. But most things',\n  'like-this',\n  'or-this',\n  'but not this :(  ',\n  'you.can.also.email.me.with.specific.topics.like',\n  'just-saying-hi',\n  'please-work-for-us',\n  'help',\n  'admin',\n  'or-I-really-like-your-website',\n  'thanks',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = ({ loopMessage }) => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(0); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      if (loopMessage) {\n        updateIter(0);\n        updateChar(0);\n      } else {\n        setIsActive(false);\n      }\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n    >\n      <a href=\"mailto:mattluutrang@gmail.com\">\n        <span>mattluutrang@gmail.com</span>\n      </a>\n      {/* <a href={validateText(message) ? `mailto:${message}@mldangelo.com` : ''}> */}\n      {/*   <span>{message}</span> */}\n      {/*   <span>@mldangelo.com</span> */}\n    </div>\n  );\n};\n\nEmailLink.defaultProps = {\n  loopMessage: false,\n};\n\nEmailLink.propTypes = {\n  loopMessage: PropTypes.bool,\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description=\"Contact Matthew Trang via email @ mattluutrang@gmail.com\"\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\n        </div>\n      </header>\n      <div className=\"email-at\">\n        <p>Feel free to get in touch. You can email me at: </p>\n        <EmailLink />\n      </div>\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"names":["messages","EmailLink","_ref","text","loopMessage","_useState","useState","_useState2","_slicedToArray","idx","updateIter","_useState3","_useState4","message","updateMessage","_useState5","_useState6","char","updateChar","_useState7","_useState8","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","length","slice","_jsx","className","style","test","color","onMouseEnter","onMouseLeave","children","href","defaultProps","Main","title","description","_jsxs","Link","to","ContactIcons"],"sourceRoot":""}